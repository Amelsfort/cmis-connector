<?xml version="1.0" encoding="UTF-8"?>
<!--

    Mule CMIS Connector

    Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com

    The software in this package is published under the terms of the CPAL v1.0
    license, a copy of which has been included with this distribution in the
    LICENSE.txt file.

-->

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
       xmlns:bitly="http://www.mulesoft.org/schema/mule/bitly"
       xmlns:cmis="http://www.mulesoft.org/schema/mule/cmis"
       xmlns:json="http://www.mulesoft.org/schema/mule/json"
       xmlns:mongodb="http://www.mulesoft.org/schema/mule/mongodb"
       xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.mulesoft.org/schema/mule/bitly   http://www.mulesoft.org/schema/mule/bitly/3.1/mule-bitly.xsd
       http://www.mulesoft.org/schema/mule/cmis    http://www.mulesoft.org/schema/mule/cmis/1.3/mule-cmis.xsd
       http://www.mulesoft.org/schema/mule/core    http://www.mulesoft.org/schema/mule/core/3.1/mule.xsd
       http://www.mulesoft.org/schema/mule/json    http://www.mulesoft.org/schema/mule/json/3.1/mule-json.xsd
       http://www.mulesoft.org/schema/mule/mongodb http://www.mulesoft.org/schema/mule/mongodb/3.1/mule-mongodb.xsd
       http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/3.1/mule-scripting.xsd 
       http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/3.1/mule-twitter.xsd
       ">
  <!-- twitter autorization -->
  <global-property name="twitter.consumer.key"    value="GEDBcCgOrbSRxvED70yZmA"/>
  <global-property name="twitter.consumer.secret" value="pKJTwFA6nuvk1MiQPmA4Zeq3SSMh80WADvOcMsNvWQ"/>
  <global-property name="twitter.access.key"      value="50074149-j8EVyKqc1fZB9gIeFuCgzLnpMdAyxwFhnmm79xuY"/>
  <global-property name="twitter.access.secret"   value="wrBTf7FqA5YdCGkecJvsgFJ3X3PkL7tTW7LlLiA1NY"/>
  
  <!-- the id of the last change saw in the repository. Alfresco use integers  -->
  <global-property name="cmis.repository.base" value="http://cmis.alfresco.com/service/cmis"/>
  <global-property name="cmis.repository.id"   value="371554cd-ac06-40ba-98b8-e6b60275cca7"/>
  <global-property name="cmis.demo.idempotent.directory" value="/tmp"/>

  <!-- configuration! -->
  <cmis:config name="alfresco" username="admin" password="admin" 
               baseUrl="${cmis.repository.base}" repositoryId="${cmis.repository.id}"/>
  
  <twitter:config name="twitteraccount1" format="JSON" 
           consumerKey="${twitter.consumer.key}"
        consumerSecret="${twitter.consumer.secret}" 
            oauthToken="${twitter.access.key}" 
      oauthTokenSecret="${twitter.access.secret}"/>
  <bitly:config login="mulecmistest" apiKey="R_a0e377a5a61e90eb96ac5fe8c3ee9073" />
<!--  <bitly:config login="bitlyapidemo" apiKey="R_0da49e0a9118ff35f52f629d2d71bf07" />-->
  <mongodb:connector name="mongo" database="cmisdemo" hostname="127.0.0.1" />

  <flow name="cmisDemo">
    <description>
       1. the system poll the CMIS repository for changes
       1. The system looks in an internal database for the changeLogToken to use.
          1.1 if it does not exists then retrieves the "Latest Change Token" from the CMIS repository
              (so in this run there won't be any change, but the run will be available) 
       2. The system fetch the changelog from the CMIS repository
       3. The system saves the new changelog token in the database for later use  
       4. For every change the repository receives
          4.1. the system filters out every change that is not a CREATION
          4.2  the system filters out any change that is no refering to a Document
          4.3  the system filters out duplicated message
          4.4. the system fetch the document metadata 
          4.4  the system publish the short text to twitter, facebook, rss, et. al
    </description>
      <inbound-endpoint address="http://localhost:9090/changelog"/> 
      <flow-ref name="retrieveChangelogTokenFlow"/>
      <flow-ref name="changeLogFlow"/>
  </flow>
  

  <flow name="changeLogFlow">
      <description>
          Get changes from the repository. Expects as payload the CMIS last changelog token.
      </description>
      
      <logger level="WARN" message="Fetching changelog for revision #[payload]"/>
      <cmis:changelog changeLogToken="#[payload]" includeProperties="false" />
      <async>
         <!-- store the changelog token -->
         <expression-transformer>
            <return-argument evaluator="bean" expression="latestChangeLogToken" />
         </expression-transformer>
         <flow-ref name="storeChangelog"/>
      </async>
      <choice> 
         <!-- expression-transform if changeEvent only has a results returns the item instead of the
              of the collection, so the collection-splitter will fail
          -->
         <when evaluator="bean" expression="totalNumItems &gt;  1" >
           <expression-transformer>
              <return-argument expression="changeEvents" evaluator="bean"/>
           </expression-transformer>
           <collection-splitter  />
           <flow-ref name="processChangeLogEvent"/>
         </when>
         <otherwise>
            <expression-transformer>
                 <return-argument expression="changeEvents" evaluator="bean"/>
              </expression-transformer>
              <flow-ref name="processChangeLogEvent"/>
         </otherwise>
      </choice>
  </flow>
  
 <flow name="processChangeLogEvent">
       <!-- the only changes that we are interested in are creations -->
       <expression-filter expression="changeType.value() eq 'created' " evaluator="ognl"/>
       <!-- no duplicates -->
       <idempotent-message-filter idExpression="#[bean:changeTime.timeInMillis]-#[bean:changeType]-#[bean:objectId]-">
         <simple-text-file-store directory="${cmis.demo.idempotent.directory}" name="cmis-demo"/>
       </idempotent-message-filter>
       <logger level="WARN" message="Change detected! #[bean:changeType] #[bean:objectId]"/>
       <cmis:get-object-by-id objectId="#[bean:objectId]" />
       <payload-type-filter expectedType="org.apache.chemistry.opencmis.client.api.Document"/>
       <flow-ref name="renderCreationMessage"/>
       <logger level="WARN" message="To publish #[payload]"/>
      <flow-ref name="publishTwitterFlow"/>
 </flow>

  <flow name="retrieveChangelogTokenFlow">
      <description>
      Finds the last changelog token to use to query the CMIS repository.
      First we look to in a mongo db for the token. If it is not found, 
      we use the one exponsed by the repository (won't detect any changes now,
      but is a base for the future) 
      </description>
         <mongodb:outbound-endpoint collection="cmisdemo"  connector-ref="mongo" 
                                      query='{ "repository": "${cmis.repository.id}" }'
                           exchange-pattern="request-response"/>
            

       <choice>
           <when evaluator="payload" expression="java.lang.String">
               <cmis:repository-info/>
               <expression-transformer>
                  <return-argument evaluator="ognl" expression="latestChangeLogToken" />
               </expression-transformer>
           </when>
           <otherwise>
              <expression-transformer>
                  <return-argument evaluator="ognl" expression="get(0).get('changelogToken')" />
               </expression-transformer>
           </otherwise>
       </choice>
      <!-- the payload is the changelog token -->
  </flow>

  <flow name="storeChangelog">
      <description>
         Store the changelog token so it can be later retrieved  
         with the flow retrieveChangelogTokenFlow.
      </description>
      <enricher  target="#[variable:repository]">
          <expression-transformer>
              <return-argument expression="${cmis.repository.id}" evaluator="string"/>
          </expression-transformer>
      </enricher>
      <logger level="WARN" message="Storing #[payload] as last changelog token"/>
      <expression-transformer>
         <return-argument evaluator="string" expression='{"repository": "#[variable:repository]", "changelogToken": "#[payload]"}' />
      </expression-transformer>
      <mongodb:outbound-endpoint collection="cmisdemo"  
                              connector-ref="mongo" 
                               dispatchMode="update" 
                                updateQuery='{"repository" : "${cmis.repository.id}"}'
                           exchange-pattern="request-response" upsert="true"/>
  </flow>
  
  <flow name="renderCreationMessage">
       <description>
           Renders the message to publish using social media network (like twitter)
           comunicating the existence of a new document.
           
           The input payload is a CMIS Document.
       </description>
       <enricher target="#[variable:url]">
          <flow-ref name="shortDocumentURIFlow"/>
       </enricher>
       <enricher target="#[variable:content]">
         <flow-ref name="abstractDocumentCreationFlow"/>
       </enricher>
       <expression-transformer>
          <return-argument expression="New file named #[bean:name] created in the repository #[variable:url] #[variable:content]" evaluator="string"/>
       </expression-transformer>
  </flow>
  
  <flow name="abstractDocumentCreationFlow">
     <description>
          Given a CMIS Document as payload, creates an abstract of the document
          depending on the content type
     </description>
     <choice>
         <when evaluator="bean" expression="contentStream.mimeType = 'text/plain'">
             <scripting:component>
                <scripting:script engine="groovy">
                   import  org.apache.commons.io.IOUtils;
                   import org.apache.commons.lang.StringUtils;
                   
                   is = message.payload.contentStream.stream;
                   try 
                   {
                      return StringUtils.abbreviate(IOUtils.toString(is), 100);
                   } 
                   finally 
                   {
                      is.close();
                   }
                </scripting:script>
             </scripting:component>
         </when>
         <!-- TODO ... add text/html using tidy + xsl  -->
         <otherwise>
             <expression-transformer>
                <return-argument expression="" evaluator="string"/>
             </expression-transformer>
         </otherwise>
     </choice>
     <choice>
        <when expression="length() > 0" evaluator="ognl">
           <expression-transformer>
              <return-argument expression="`#[payload]'" evaluator="string"/>
           </expression-transformer>
        </when>
        <otherwise>
           <logger level="DEBUG" message="no message"/>
        </otherwise>
     </choice>
  </flow>
  
  <flow name="shortDocumentURIFlow">
       <description>
          gets a short document link for a repository file 
       </description>
      <flow-ref name="documentURIFlow"/>
      <flow-ref name="shortLinkFlow"/>
  </flow>
  
  <flow name="documentURIFlow">
     <description>
        Given a Cmis document returns a URI to download the content.
        This is a hack, binded to alfresco CMIS endpoint.
     </description>
     <expression-transformer>
        <return-argument expression="http://cmis.alfresco.com/service/cmis/s/workspace:SpacesStore/i/#[ognl:id.substring(24)]/content.txt" evaluator="string"/>
     </expression-transformer>
  </flow>
  
  
  <!-- //////////////////////// GENERIC FLOW! \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' '-->
  
  <flow name="publishTwitterFlow">
      <description>
         publish payload to twitter
      </description>
      <scripting:component>
                <scripting:script engine="groovy">
                   import org.apache.commons.lang.StringUtils;
                   
                   return StringUtils.abbreviate(message.payload, 140);
                </scripting:script>
      </scripting:component>
      <twitter:update-status status="#[payload]" config-ref="twitteraccount1"/>
  </flow>
  
  <flow name="shortLinkFlow">
       <description>
       Shorten links with bitly. Receives as payload the uri to be shorten and returns as payload
       the shortened uri. If it fails it returns the original uri.
       </description>
       <enricher target="#[variable:url]">
          <expression-transformer>
              <return-argument expression="" evaluator="payload"/>
           </expression-transformer>
       </enricher>
       <bitly:shorten url="#[payload]"/>
       <choice>
          <when expression="errorCode = 0" evaluator="json">
              <splitter expression="results" evaluator="json"/>
              <json:json-to-object-transformer />
              <scripting:component>
                 <scripting:script engine="groovy">
                  longUrl = message.getInvocationProperty('longUrl');
                  status = message.payload.get("'"+  longUrl   + "'")
                  if(status.get('shortUrl') != null) {
                     ret = status.get('shortUrl').valueAsText;
                  } else {
                     ret = longUrl;
                  }
                  return ret;
                 </scripting:script>
              </scripting:component>
          </when>
          <otherwise>
             <expression-transformer>
                <return-argument expression="url" evaluator="variable"/>
             </expression-transformer>
          </otherwise>
       </choice>
  </flow>
</mule>
